[tox]
envlist = py39, static, docs

[testenv]
deps=
	-r requirements.txt
	-r test-requirements.txt
commands=pytest {posargs}
whitelist_externals=sh

[testenv:static]
commands=
    mypy --install-types --non-interactive -p exodus_lambda -p tests
	sh -c 'pylint exodus_lambda; test $(( $? & (1|2|4|32) )) = 0'
    black --check .
    isort --check .

[testenv:cov]
usedevelop=true
commands=
	pytest --cov-report=html --cov=exodus_lambda {posargs}

[testenv:cov-ci]
passenv=GITHUB_*
usedevelop=true
commands=
	pytest --cov=exodus_lambda {posargs}
	coveralls --service=github

[testenv:docs]
use_develop=true
deps=
    sphinx
    graphviz
commands=
	sphinx-build -M html docs docs/_build

# Create a lambda deployment package.
[testenv:package]
skip_install=true
whitelist_externals=
    sh
    rm
commands=
    rm -rf ./package package.zip

    # --require-hashes and then --no-deps to avoid using anything untrusted from PyPI
    pip install --require-hashes -r requirements.txt --target ./package
    pip install --no-deps --target ./package .

    sh -c 'scripts/mk-config > package/lambda_config.json'

    sh -c 'cd package && zip -r ../package.zip .'
    rm -rf ./package

[testenv:fakefront]
# Serve exodus-lambda through a local development server which simulates
# basic CloudFront behaviors.
#
# The default configuration of this environment is designed to work with
# the localstack instance deployed by the exodus-gw dev env, described
# at: https://release-engineering.github.io/exodus-gw/development.html
#
# You will have to tweak the environment variables if you use a different
# environment, or different bucket & table names.
passenv = EXODUS_*
usedevelop = true
deps=
    gunicorn
setenv =
    EXODUS_AWS_ENDPOINT_URL=https://localhost:3377
    EXODUS_TABLE=my-table
    EXODUS_CONFIG_TABLE=my-config
    ORIGIN_REQUEST_LOGGER_LEVEL=DEBUG
    ORIGIN_RESPONSE_LOGGER_LEVEL=DEBUG
    EXODUS_LOG_FORMAT=%(asctime)s - %(levelname)s - %(message)s
    EXODUS_KEY_ID=FAKEFRONT
commands =
    gunicorn support.fakefront -b 127.0.0.1:8049 --reload {posargs}

[testenv:integration-tests]
passenv = *
commands=
	pytest ./tests/integration --lambda-stack {env:STACK_NAME} {posargs}

[pytest]
testpaths = tests
addopts = -v

[coverage:run]
relative_files = true
