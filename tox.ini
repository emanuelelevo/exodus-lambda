[tox]
envlist = py39, static, docs

[testenv]
deps=
	-r requirements.txt
	-r test-requirements.txt
commands=pytest {posargs}
whitelist_externals=sh

[testenv:static]
commands=
    mypy --install-types --non-interactive -p exodus_lambda -p tests
	sh -c 'pylint exodus_lambda; test $(( $? & (1|2|4|32) )) = 0'
    black --check .
    isort --check .

[testenv:cov]
usedevelop=true
commands=
	pytest --cov-report=html --cov=exodus_lambda {posargs}

[testenv:cov-ci]
passenv=GITHUB_*
usedevelop=true
commands=
	pytest --cov=exodus_lambda {posargs}
	coveralls --service=github

[testenv:docs]
use_develop=true
deps=
    sphinx
    graphviz
commands=
	sphinx-build -M html docs docs/_build

# Create a lambda deployment package.
[testenv:package]
skip_install=true
whitelist_externals=
    sh
    rm
    cp
commands=
    rm -rf ./package package.zip

    # --require-hashes and then --no-deps to avoid using anything untrusted from PyPI
    pip install --require-hashes -r requirements.txt --target ./package
    pip install --no-deps --target ./package .

    # Always using hardcoded config for now.
    sh -c 'envsubst < configuration/lambda_config.template > configuration/lambda_config.json'
    cp configuration/lambda_config.json package

    sh -c 'cd package && zip -r ../package.zip .'
    rm -rf ./package

[testenv:integration-tests]
passenv = *
commands=
	pytest ./tests/integration --lambda-stack {env:STACK_NAME} {posargs}

[pytest]
testpaths = tests
addopts = -v

[coverage:run]
relative_files = true
